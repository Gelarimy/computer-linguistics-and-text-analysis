# -*- coding: utf-8 -*-
"""КЛиАТ_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pj6VHhCvwDIlnAF-tCvAOJ_w9p1SJFUO
"""

!pip install pymorphy2
import pymorphy2
morph = pymorphy2.MorphAnalyzer()

import re

!pip install python-Levenshtein
from Levenshtein import distance

from nltk.stem.snowball import SnowballStemmer 
stemmer = SnowballStemmer("russian")

"""# Формируем словарь из начальных форм слов без деления на части речи

Определяем часть речи, для каждой придумываем свои правила изменения:

* существительные: суффиксы + все окончания
* глаголы: приставки + спряжения + изменения по времени
* прилагательные: окончания

Возвращаем кортеж (начальная лемма, стемм с приставками/суффиксами, формы)
"""

dictionary = 
["жук", "лист", "небо",  "окно", "солнце",  "зима", "лето", "стекло", "облако", "дерево", "цветок",
 "высокий", "низкий", "синий", "красный", "красивый", "тяжёлый", "лёгкий", "белый", "длинный",
"лететь",  "сидеть", "думать", "плыть", "тонуть", "падать", "нюхать", "смотреть", "показывать", "видеть",  "слышать"]

def get_forms(word):
  p = morph.parse(word)[0]
  if('NOUN' in p.tag):
    forms = []
    c = stemmer.stem(word)
    cutted = []
    words = []
    
    for suffix in ['', 'ок', 'очко']:
      suff_forms = set()
      if suffix == '':
        p = morph.parse(word)[0]
      else:
        p = morph.parse(c+suffix)[0]
      for f in ['nomn', 'gent', 'datv', 'accs', 'ablt', 'loct']:
        for n in ['sing', 'plur']:
          if 'Sgtm' in p.tag and n=='plur':
            continue
          suff_forms.add(p.inflect({f, n})[0])
          if f=='nomn' and n=='sing':
            words.append(c+suffix)
      cutted.append(c+suffix)    
      forms.append(suff_forms)
        
  if('INFN' in p.tag):
    forms = []
    c = stemmer.stem(word)
    cutted = []
    words = []
    pref_forms = set()
    for f in ['pres', 'past', 'actv', 'PRTF']:
      if f=='pres':
        for n in ['sing', 'plur']:       
            for per in ['1per', '2per', '3per']:
              pref_forms.add(p.inflect({f, n, per})[0])
      else:     
        for g in ['masc', 'femn', 'neut', 'plur']:
          pref_forms.add(p.inflect({f, g})[0])

    words.append(word)
    cutted.append(c)     
    forms.append(pref_forms)
    for prefix in ['пере', 'под', 'за', 'в', 'про']:
      cutted.append(prefix+c)
      words.append(prefix+word)
      forms.append([prefix+w for w in pref_forms])

  if('ADJF' in p.tag): 
    forms = set()
    words = word
    cutted = stemmer.stem(word)
    for f in ['nomn', 'gent', 'datv', 'accs', 'ablt', 'loct']:
      for n in ['masc', 'femn', 'neut', 'plur']:
        forms.add(p.inflect({f, n})[0])  
  return words, cutted, forms

"""На будущее формируем следующие конструкции:

* слово (+приставки/суффиксы) : формы
* изменённое слово приставками/суффиксами : начальная форма
* список обрезанных изменённых слов, по которому осуществляется первичный поиск
"""

word_forms = dict()
original_forms = dict()
stammed_dictionary = []
for w in dictionary:
  words, cutted, forms = get_forms(w)
  if type(cutted) is list:
    for ws, c, f in zip(words, cutted, forms):
      word_forms[ws] = f
      stammed_dictionary.append(c)
      original_forms[ws] = w
  else:    
    word_forms[words] = forms
    stammed_dictionary.append(cutted)
    original_forms[words] = w
print(len(word_forms))

"""# Текст"""

text = "Красивый цветок растёт под окном... Ещё вчера на него садился тяжёлый жук-жучок, \n \
сидел, ткнул, и взлетал в синее небо, по которому плыли белые облака. Облако проcлыло по небчку, \n \
и коасный цвиток стал выским. Длиинный иист падал, как будто тнул"
format_text = re.sub(r'[^\w\s]',' ', text.lower()).split()

"""Общий принцип:

* проверка на не ту часть речи
* стемминг слова, чтобы окончания не повлияли на расстояние
* поиск по словарю стеммингов с максимальным расстоянием 3
* если найден подходящий стем, то поиск в формах слова
* если форма полностью совпадает, поиск прекращается, результат записывается
* иначе поиск по формам, запоминается минимальное расстояние, подходящие формы, поиск идёт дальше
* если ещё один вариант с таким же расстоянием, то он добавляется в возможные формы, если мешьше расстояние, то записывается новый вариант исправления слова
* в итоге получаются конструкции-результаты (лучшая начальная форма, предложенные исправления по этой форме, количество ошибок). Для каждого слова может быть несколько конструкций, если у них одинаковое расстояние.
"""

result = dict()
matches = 0
for w in format_text:
  # проверка на союз, предлог и прочее
  p = morph.parse(w)[0]
  if ('PREP' in p.tag or 'CONJ' in p.tag or 'PRCL' in p.tag  or 'INTJ' in p.tag):
    continue

  match = False
  dist = 3
  best_lemma_match = []
  best_match = []
  stammed = stemmer.stem(w)

  for full_w, stam_w in zip(word_forms, stammed_dictionary):
    # если слово без окончания по длине отличается 
    #более чем на 2 символа от словарного, идём к следующему
    if abs(len(stammed) - len(stam_w)) > 2:
      continue

    if distance(stammed, stam_w) < 4:
      if w in word_forms[full_w]:
        best_lemma_match = [original_forms[full_w]]
        best_match = [w]
        match = True
        dist = 0
        break
      for f in word_forms[full_w]:
        if distance(w, f) == dist and match:
          best_lemma_match.append(original_forms[full_w])
          best_match.append(f)
        if distance(w, f) < dist:
          match = True
          best_lemma_match = [original_forms[full_w]]
          best_match = [f]
          dist = distance(w, f)
  if match:
    matches+=1
    if not dist:
      best_match = ''
    else:
      best_match = '|'.join([str(elem) for elem in best_match])
    for best_l_m in best_lemma_match:
      if best_l_m in result:
        result[best_l_m].add((w, best_match, dist))
      else:
        result[best_l_m] = set()
        result[best_l_m].add((w, best_match, dist))

print(text)
print("Found:", matches, '/', len(format_text))
for k in result:
  print(len(result[k]), k, ':', *[wd[0] +'(' + wd[1] + ' ' + str(wd[2]) + ')' for wd in result[k]])

#Как выглядит словарь, по которому впервые ищем слово
stammed_dictionary[:10]

#Как выглядит словарь соотношения преобразванного слова и оригинала
list(original_forms.items())[:10]

